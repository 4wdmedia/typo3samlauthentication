<?php
namespace DanielPfeil\Samlauthentication\Service;

use DanielPfeil\Samlauthentication\Enum\AuthenticationStatus;
use DanielPfeil\Samlauthentication\Utility\FactoryUtility;
use TYPO3\CMS\Core\Database\ConnectionPool;
use TYPO3\CMS\Core\Utility\GeneralUtility;
use TYPO3\CMS\Extbase\Object\ObjectManager;
use TYPO3\CMS\Extbase\Utility\DebuggerUtility;

class AuthenticationService extends \TYPO3\CMS\Sv\AuthenticationService
{
    public function getUser()
    {
        DebuggerUtility::var_dump(FactoryUtility::getServiceProviders());

        $user = parent::getUser();
        if(!$user){
            try{
                $samlComponent = FactoryUtility::getSAMLUtility();
                $samlUserData = $samlComponent->getUserData();


                $queryBuilderFeUsers = GeneralUtility::makeInstance(ConnectionPool::class)->getQueryBuilderForTable('fe_user');
                $queryBuilderFeUsers->insert('fe_users')
                    ->values([
                        'username' => $samlUserData["uid"],
                        'password' => \TYPO3\CMS\Saltedpasswords\Salt\SaltFactory::getSaltingInstance(NULL)->getHashedPassword('123'),
                        'PID' => 2,
                        'tstamp' => time(),
                        'usergroup' => '1'
                    ])
                    ->execute();

                $user = parent::getUser();
            } catch(\Exception $exception){
                //TODO implement
                DebuggerUtility::var_dump($exception);
            }
        }

        return $user;
    }

    public function authUser(array $user)
    {
        //todo make configurable what SAML is to use
        $samlComponent = FactoryUtility::getSAMLUtility();
        $samlUserData = $samlComponent->getUserData();

        if ($samlUserData["uid"] == $user["username"]) {
            return AuthenticationStatus::SUCCESS_BREAK;
        }
        return AuthenticationStatus::FAIL_CONTINUE;
    }

    public function getGroups($user, $knownGroups)
    {
//        return parent::getGroups($user, $knownGroups); // TODO: Change the autogenerated stub
    }

    public function getSubGroups($grList, $idList = '', &$groups = null)
    {
//        parent::getSubGroups($grList, $idList, $groups); // TODO: Change the autogenerated stub
    }
}
