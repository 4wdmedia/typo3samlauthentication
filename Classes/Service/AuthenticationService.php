<?php

namespace DanielPfeil\Samlauthentication\Service;

use DanielPfeil\Samlauthentication\Enum\AuthenticationStatus;
use DanielPfeil\Samlauthentication\Utility\FactoryUtility;
use DanielPfeil\Samlauthentication\Utility\ServiceProviderUtility;
use TYPO3\CMS\Core\Utility\GeneralUtility;
use TYPO3\CMS\Extbase\Utility\DebuggerUtility;

class AuthenticationService extends \TYPO3\CMS\Sv\AuthenticationService
{
    public function getUser()
    {
        //todo check if parent is needed before or after?
        //$user = parent::getUser();
        $user = false;
        try {
            $serviceProviderUtility = ServiceProviderUtility::getInstance();

            $activeServiceProviders = $serviceProviderUtility->getActive(FactoryUtility::getServiceProviders());
            foreach ($activeServiceProviders as $activeServiceProvider) {
                $samlComponent = FactoryUtility::getSAMLUtility($activeServiceProvider);
                $storedSuccessfull = $samlComponent->saveUserData($activeServiceProvider);
                if ($storedSuccessfull) {
                    break;
                }
            }

//                $queryBuilderFeUsers = GeneralUtility::makeInstance(ConnectionPool::class)->getQueryBuilderForTable('fe_user');
//                $queryBuilderFeUsers->insert('fe_users')
//                    ->values([
//                        'username' => $samlUserData["uid"],
//                        'password' => \TYPO3\CMS\Saltedpasswords\Salt\SaltFactory::getSaltingInstance(null)->getHashedPassword('123'),
//                        'PID' => 2,
//                        'tstamp' => time(),
//                        'usergroup' => '1'
//                    ])
//                    ->execute();
//

            $user = $this->fetchUserRecord($this->login['uname']);

            if (!is_array($user)) {
                // Failed login attempt (no username found)
                $this->writelog(255, 3, 3, 2, 'Login-attempt from %s (%s), username \'%s\' not found!!',
                    [$this->authInfo['REMOTE_ADDR'], $this->authInfo['REMOTE_HOST'], $this->login['uname']]);
                // Logout written to log
                GeneralUtility::sysLog(sprintf('Login-attempt from %s (%s), username \'%s\' not found!',
                    $this->authInfo['REMOTE_ADDR'], $this->authInfo['REMOTE_HOST'], $this->login['uname']), 'core',
                    GeneralUtility::SYSLOG_SEVERITY_WARNING);
            } else {
                if ($this->writeDevLog) {
                    GeneralUtility::devLog('User found: ' . GeneralUtility::arrayToLogString($user,
                            [$this->db_user['userid_column'], $this->db_user['username_column']]), self::class);
                }
            }
        } catch (\Exception $exception) {
            //TODO implement
            DebuggerUtility::var_dump($exception);
        }

        return $user;
    }

    public function authUser(array $user)
    {
        $serviceProviderUtility = ServiceProviderUtility::getInstance();

        $activeServiceProviders = $serviceProviderUtility->getActive(FactoryUtility::getServiceProviders());

        foreach ($activeServiceProviders as $activeServiceProvider) {
            $samlComponent = FactoryUtility::getSAMLUtility($activeServiceProvider);
            $samlUserData = $samlComponent->getUserData($activeServiceProvider);

            $samlUsername = $samlUserData["be_users"]["username"]->getValue();
            if (TYPO3_MODE === "FE") {
                $samlUsername = $samlUserData["fe_users"]["username"]->getValue();
            }

            DebuggerUtility::var_dump($_SERVER);


            if ($samlUsername == $user["username"]) {
                return AuthenticationStatus::SUCCESS_BREAK;
            }
        }
        return AuthenticationStatus::FAIL_CONTINUE;
    }

    public function getGroups($user, $knownGroups)
    {
//        return parent::getGroups($user, $knownGroups); // TODO: Change the autogenerated stub
    }

    public function getSubGroups($grList, $idList = '', &$groups = null)
    {
//        parent::getSubGroups($grList, $idList, $groups); // TODO: Change the autogenerated stub
    }
}
